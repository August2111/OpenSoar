# the name of the target operating system
set(CMAKE_SYSTEM_NAME Windows)

# which compilers to use for C and C++
 set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)
 set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)

# set(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)
 
if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL Windows)
    set(WIN_HOST ON)
else()
    # here is the target environment located
    set(CMAKE_FIND_ROOT_PATH  /usr/bin ) 
    # set(CMAKE_FIND_ROOT_PATH  /usr/lib/gcc/x86_64-w64-mingw32/10-win32 ) 
    # set(CMAKE_FIND_ROOT_PATH  /usr/x86_64-w64-mingw32 )  #  /home/august/mingw-install

    # because cross compiling no compiler check
    set(CMAKE_C_COMPILER_WORKS 1)
    set(CMAKE_CXX_COMPILER_WORKS 1)
endif()

set(MINGW ON)

# adjust the default behaviour of the FIND_XXX() commands:
# search headers and libraries in the target environment, search
# programs in the host environment

#set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
#set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
#set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

set(CMAKE_INCLUDE_SYSTEM  build/cmake/MinGW.cmake)

# message(FATAL_ERROR "Stop: ${CMAKE_INCLUDE_SYSTEM}")